{"version":3,"sources":["comment.js","vannila.js","pineapple.js","chocolate.js","strawberry.js","blackberry.js","App.js","serviceWorker.js","index.js"],"names":["Comment","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fSubmit","e","preventDefault","console","log","datas","state","cm","refs","value","cmnt","act","data","push","index","setState","myForm","reset","fRemove","i","splice","fEdit","title","_this2","react_default","a","createElement","className","ref","type","placeholder","onClick","map","id","Component","Vannila","BrowserRouter","Route","component","Pineapple","Chocolate","Switch","Strawberry","Blackberry","App","Link","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e49e9a41.chunk.js","sourcesContent":["\r\n\r\n    import React,{ Component } from 'react';\r\n    import './App.css';\r\n    \r\n    class Comment extends Component {\r\n        constructor(props){\r\n           super(props);\r\n        this.state={\r\n            title: 'Kindly leave your thoughts below',\r\n            act:0,\r\n            index:'',\r\n            datas:[]\r\n        }\r\n      }\r\n      \r\n      fSubmit= (e) =>{\r\n           e.preventDefault();\r\n           console.log('try');\r\n           \r\n           let datas=this.state.datas;\r\n           let cm=this.refs.cm.value;\r\n           let cmnt=this.refs.cmnt.value;\r\n           \r\n           if(this.state.act===0){\r\n               let data={\r\n               cm,cmnt\r\n           }\r\n           \r\n           datas.push(data);\r\n           \r\n           \r\n           }else{\r\n               let index=this.state.index;\r\n               datas[index].cm=cm;\r\n               datas[index].cmnt=cmnt;\r\n\r\n               \r\n           }\r\n           \r\n           \r\n           this.setState({\r\n            datas:datas,\r\n            act:0\r\n           });\r\n           \r\n           this.refs.myForm.reset();\r\n           \r\n      }\r\n      \r\n       fRemove=(i)=> {\r\n           let datas = this.state.datas;\r\n           datas.splice(i,1);\r\n            this.setState({\r\n                datas:datas\r\n            });\r\n          this.refs.myForm.reset();\r\n           \r\n       }\r\n       fEdit=(i) => {\r\n          let data=this.state.datas[i];\r\n          this.refs.cm.value=data.cm;\r\n          this.refs.cmnt.value=data.cmnt;\r\n          this.setState({\r\n            act:1,\r\n            index:i\r\n          });\r\n           \r\n        }\r\n     \r\n        render() {\r\n            let datas = this.state.datas;\r\n            return(\r\n              <div className=\"Comment\">\r\n              <h2>{this.state.title}</h2>\r\n              <form ref=\"myForm\" className=\"myForm\">\r\n                \r\n                 <input type=\"text\" ref=\"cm\" placeholder=\"Your name\"  />\r\n                <div >\r\n                 <textarea   ref=\"cmnt\" placeholder=\"Add a comment\"></textarea>\r\n                 </div>\r\n                  <button onClick={(e)=>this.fSubmit(e)} className=\"myButton\"> submit</button>\r\n              </form>\r\n              <pre>\r\n              {\r\n                  datas.map((data,i) =>\r\n                   <li  className=\"myList\">\r\n                        {data.cm}<br/>\r\n                        <div id='cma'>\r\n                       {data.cmnt}</div>\r\n                       <button onClick={()=>this.fRemove(i)} className=\"myListButton\">remove</button>\r\n                       <button onClick={()=>this.fEdit(i)} className=\"myListButton\">edit</button>\r\n                      \r\n                        \r\n                    </li>   \r\n              )}\r\n             </pre>\r\n              </div>\r\n              );\r\n        }\r\n    }\r\n     export default Comment;\t","import React ,{ Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Comment from './comment';\r\nimport {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom';\r\n\r\n\r\nclass Vannila extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div id='v'>\r\n               <h1>The Best Vannila cake(Soft and Buttery Vannila cake)</h1>\r\n              <p> This is a comprehensive guide to making delicious vanilla cake as an 8 inch cake, 9 inch cake, sheet cake,\r\n                or even cupcakes, with chocolate OR vanilla frosting!</p>\r\n             \r\n             \r\n             <div id='v1'>\r\n             <h3>Ingredients</h3>\r\n             <ol>\r\n \r\n              <li> margarine or softened butter 175g (6oz).</li>\r\n              <li> caster sugar 175g (6oz).</li>\r\n              <li>3 large eggs.</li>\r\n              <li>self-raising flour, sifted 175g (6oz).</li>\r\n              <li>1tsp baking powder.</li>\r\n              <li>1tsp vanilla extract.</li>\r\n              <li>pinch of salt.</li>\r\n             \r\n             </ol>\r\n             \r\n              <div id='v2'>\r\n              <h3>Method</h3>\r\n              <ol>\r\n\r\n               <li>Preheat the oven to 195C/fan 175C/gas 3.5</li>\r\n              <li> Cream the butter and sugar together until it becomes a pale yellow/white colour.</li>\r\n               <li>Sift in the flour and baking powder. Then add the eggs and vanilla essence. Fold together until it is all combined.</li>\r\n               <li>Place the mixture in to greased tins or cupcake cases.</li>\r\n               <li>Bake in the oven for 15-20 minutes until golden brown and springs back when gently pressed. Once baked leave to cool for 30 minutes.</li>\r\n             </ol>\r\n             </div>\r\n             </div>\r\n             <Router>\r\n           \r\n\t\t\t <Route component={Comment} />\r\n\t\t    \r\n             </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Vannila;","import React ,{ Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom';\r\nimport Comment from './comment';\r\nclass Pineapple extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div id='pine'>\r\n               <h1>The Best Pineapple cake(Soft and Buttery Pineapple cake)</h1>\r\n               <p> This is a comprehensive guide to making delicious Pineapple cake as an 8 inch cake, 9 inch cake, sheet cake,\r\n                or even cupcakes, with chocolate OR Pineapple frosting!</p>\r\n             <div id='pine1'>\r\n             <h3>Ingredients</h3>\r\n             <ol>\r\n \r\n              <li> margarine or softened butter 175g (6oz).</li>\r\n              <li> caster sugar 175g (6oz).</li>\r\n              \r\n              <li>self-raising flour, sifted 175g (6oz).</li>\r\n              <li>1tsp baking powder.</li>\r\n              <li>1tsp Pineapple extract.</li>\r\n              <li>pinch of salt.</li>\r\n             \r\n             </ol>\r\n             <div id=\"pine3\">\r\n             <h3>Method</h3>\r\n             <ol>\r\n             <li>Heat oven to 180C/160C fan/gas 4.</li>\r\n             <li>For the topping, beat 50g softened butter and 50g light soft brown sugar together until creamy. Spread over the base and a quarter of the way up the sides of a 20cm round cake tin. Arrange 7 pineapple rings on top (reserving the syrup for later), then place 7 glacé cherries in the centres of the rings.</li>\r\n             <li>Place 100g softened butter, 100g golden caster sugar, 100g self-raising flour, 1 tsp baking powder, 1 tsp vanilla extract and 2 eggs in a bowl along with 2 tbsp of the reserved pineapple syrup. Using an electric whisk, beat to a soft consistency.</li>\r\n             <li>Spoon into the tin on top of the pineapple and smooth it out so it’s level. Bake for 35 mins. Leave to stand for 5 mins, then turn out onto a plate. Serve warm with a scoop of ice cream</li>\r\n             </ol>\r\n             </div>\r\n             </div>\r\n             <Router>\r\n             \r\n\t\t\t <Route component={Comment} />\r\n\t\t     \r\n             </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pineapple;","import React ,{ Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom';\r\nimport Comment from './comment';\r\nclass Chocolate extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div id='cho'>\r\n               <h1>The Best Chocolate cake(Soft and Buttery Chocolate cake)</h1>\r\n               <p> This is a comprehensive guide to making delicious Chocolate cake as an 8 inch cake, 9 inch cake, sheet cake,\r\n                or even cupcakes, with chocolate OR Chocolate frosting!</p>\r\n             <div id='cho1'>\r\n             <h3>Ingredients</h3>\r\n             <ol>\r\n \r\n              <li> margarine or softened butter 175g (6oz).</li>\r\n              <li> caster sugar 175g (6oz).</li>\r\n              <li>3 large eggs.</li>\r\n              <li>self-raising flour, sifted 175g (6oz).</li>\r\n              <li>1tsp baking powder.</li>\r\n              <li>1tsp Chocolate extract.</li>\r\n              <li>pinch of salt.</li>\r\n               <li>icing sugar</li>\r\n               <li>2-3 perfectly ripe pears</li>\r\n             </ol>\r\n            \r\n             <div id='cho2'>\r\n             <h3>Method</h3>\r\n              <ol>           \r\n             <li>Heat oven to 180C/160C fan/gas 4. Put the hazelnuts in a food processor and whizz until finely ground. Add the flour, eggs, extra yolks, sugar, milk, cream and vanilla and whizz until you have a smooth batter.</li>\r\n             <li>Halve, core and slice the pears (you can peel them first if you like, but I usually don’t). Arrange the pear slices in a 26 x 33cm ceramic, cast iron or copper gratin dish, then pour in the batter. Bake for 30-35 mins, or until the batter is set in the centre, golden and slightly souffléd.</li>\r\n             <li>For the topping, toast the hazelnuts in a dry frying pan (keep a close eye on them – they can go from toasted to burnt very quickly), then roughly chop them so you’re left with a mixture of halved and more finely chopped nuts. Scatter over the clafoutis, then sieve a little icing sugar over the top. Leave to sit for 10-15 mins (the clafoutis will deflate a little). Serve warm with crème fraîche or pouring cream.</li>\r\n             </ol>\r\n \r\n             </div>\r\n             </div>\r\n             <Router>\r\n             <Switch>\r\n\t\t\t <Route component={Comment} />\r\n\t\t     </Switch>\r\n             </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chocolate;","import React ,{ Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom';\r\nimport Comment from './comment';\r\nclass Strawberry extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div id='s'>\r\n               <h1 >The Best Strawberry cake(Soft and Buttery Strawberry cake)</h1>\r\n               <p> This is a comprehensive guide to making delicious Strawberry  cake as an 8 inch cake, 9 inch cake, sheet cake,\r\n                or even cupcakes, with chocolate OR Strawberry  frosting!</p>\r\n             \r\n             \r\n              <div id=\"s1\">\r\n              <h3>Ingredients</h3>\r\n              <ol>\r\n              <li> margarine or softened butter 175g (6oz).</li>\r\n              <li> caster sugar 175g (6oz).</li>\r\n              \r\n              <li>self-raising flour, sifted 175g (6oz).</li>\r\n              <li>1tsp baking powder.</li>\r\n              <li>Double cream and strawberry jam (optional filling).</li>\r\n              <li>pinch of salt.</li>\r\n             \r\n             </ol>\r\n             <div id='s2'>\r\n              \r\n              <h3>Method</h3>\r\n              <ol>\r\n              <li>Preheat the oven to 180C/electric. Grease two 20 cm cake tins and line with parchment paper.</li>\r\n              <li>In a large bowl whisk the butter and sugar together until combined. Then, add the eggs one at a time and mix. Then, add all the single cream and mix once again.</li>\r\n              <li>With a wooden spoon fold in the flour a third at a time until the mixture is smooth.</li>\r\n              <li>In a separate bowl place the mashed strawberries and vanilla extract and mix gently with a small metal spoon. Add the strawberry mixture to the smooth cake mixture and combine.</li>\r\n              <li>Pour the mixture into the cake tins and bake on a middle shelf for 20 minutes.</li>\r\n              <li>Take out of the oven and leave to cool in the tins for 30 minutes before removing. After cooled, spread as much jam as desired on one of the two sponges. Then whip some double cream and place on top of the jam. Take the other sponge and sandwich both sponges together. Serve!</li>\r\n             </ol>\r\n            </div>\r\n\r\n            </div>\r\n            <Router>\r\n             \r\n\t\t\t <Route component={Comment} />\r\n\t\t    \r\n             </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Strawberry;","import React ,{ Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Comment from './comment';\r\nimport {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom';\r\nclass Blackberry extends Component{\r\n    render()\r\n    {\r\n        return (\r\n            <div id='bl'>\r\n               <h1>The Best Blackberry cake(Soft and Buttery Blackberry cake)</h1>\r\n               <p> This is a comprehensive guide to making delicious Blackberry cake as an 8 inch cake, 9 inch cake, sheet cake,\r\n                or even cupcakes, with chocolate OR Blackberry frosting!</p>\r\n             <div id='bl1'>\r\n             <h3>Ingredients</h3>\r\n             <ol>\r\n \r\n              <li> margarine or softened butter 175g (6oz).</li>\r\n              <li> caster sugar 175g (6oz).</li>\r\n              <li>3 large eggs.</li>\r\n              <li>self-raising flour, sifted 175g (6oz).</li>\r\n              <li>1tsp baking powder.</li>\r\n              <li>1tsp Blackberry extract.</li>\r\n              <li>pinch of salt.</li>\r\n              <li>frozen or fresh blackberry 350g</li>\r\n             </ol>\r\n             <div id='bl2'>\r\n             <h3>Method</h3>\r\n             <ol>\r\n              <li>Heat oven to 180C/160C fan/gas 4. Tip the flour, oats and sugar into a large bowl. Rub the butter into the flour mixture using your fingertips until only small pea-size pieces remain. Stir through the coconut, then fill a teacup with the mixture and set this aside.</li>\r\n              <li>Stir the eggs into the bowl of mixture, then spread over the bottom of a lined baking tin (31 x 17cm), or a 21cm square tin. Smooth the surface with the back of a spoon, then scatter over the blackberries. Scatter over the reserved teacup mixture and bake for 1 hr-1 hr 15 mins until golden and cooked through (if you poke a skewer in, it should come out with moist crumbs but no wet mixture). Leave to cool, then remove from the tin and cut into squares. Serve with some extra berries, if you like. Great for teatime or to pop into a lunchbox.</li>\r\n             </ol>\r\n             </div>\r\n             </div>\r\n             \r\n            <Router>\r\n             \r\n\t\t\t <Route component={Comment} />\r\n\t\t     \r\n             </Router>             \r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Blackberry;","import React,{ Component } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom';\nimport Vannila from './vannila';\nimport Pineapple from './pineapple';\nimport Chocolate from './chocolate';\nimport Strawberry from './strawberry';\nimport Blackberry from './blackberry';\nimport './vannila.css';\nimport './pineapple.css';\nimport './chocolate.css';\nimport './strawberry.css';\nimport './blackberry.css';\n\n\n\nclass App extends Component {\n\trender() {\n\t\t\n         \n\t\t\t\n\t\treturn(\n\t\t\t\n\n<Router>\n     <div className=\"App\">\n\t <div  id=\"a\" >MY CAKE APP</div>\n\t <div id=\"b\">\n\t    <ul>\n\t\t <li>\n\t\t     <Link to=\"/cake1\">\n\t         Vannila-cake</Link> \n\t\t</li>\n\t\t<li>\n\t\t     <Link to=\"/cake2\">\n\t\t     pineapple-cake</Link>\n\t         \n\t\t</li>\n\t\t<li>\n\t\t     <Link to=\"/cake3\">\n\t\t     Chocolate-cake</Link>\n\t\t\t  \n\t\t</li>\n\t\t<li>\n\t\t     <Link to=\"/cake4\">\n\t        \tstrawberry-cake</Link>\n\t         \t\t</li>\n\t\t<li>\n\t\t     <Link to=\"/cake5\">\n\t          blackberry-cake</Link>\n\t         \n\t\t</li>\n\t\t</ul>\n\t\t</div>\n\t\t<div id=\"c\"><hr/></div>\n\t\t\n\n\t\t<Switch>\n\t\t\t<Route exact path='/cake1' component={Vannila} />\n\t\t    \n\t\t</Switch>\n\t\t\n\t\t<Switch>\n\t\t\t<Route exact path='/cake2' component={Pineapple} />\n\t\t</Switch>\n\t\t\n\t\t<Switch>\n\t\t\t<Route exact path='/cake3' component={Chocolate } />\n\t\t</Switch>\n\t\t\n\t\t<Switch>\n\t\t\t<Route exact path='/cake4' component={Strawberry} />\n\t\t</Switch>\n\t\t\n\t\t<Switch>\n\t\t\t<Route exact path='/cake5' component={Blackberry} />\n\t\t</Switch>\n\t\t\n\t </div>\n\t </Router>\n     \n\t);\n\t}\n}\n\n export default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}